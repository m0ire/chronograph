{"version":3,"sources":["components/Stopwatch/Stopwatch.module.css","components/Clock/Clock.module.css","components/Timer/Timer.module.css","components/AlarmClock/AlarmClock.module.css","App.module.css","components/AlarmClock/AlarmClock.js","components/Stopwatch/Stopwatch.js","components/Timer/Timer.js","components/Clock/Clock.js","helplers.js","App.js","index.js"],"names":["module","exports","interval","Clock","visible","useState","moment","time","setTime","useEffect","setTimeout","setInterval","endOf","diff","className","styles","display","timeRow","format","utcOffset","dateRow","AlarmClock","isOn","setIsOn","alarmTime","setAlarmTime","isTimePickerOpen","setTimePickerOpen","clearInterval","console","log","milliseconds","isSame","Notification","onClick","TimePicker","ampm","open","openTo","views","value","InputProps","inputComponent","onChange","date","onClose","START_OF_DAY","startOf","Stopwatch","isStarted","setStarted","splitList","setSplitList","prevTimer","clone","add","controlPanel","splitButton","key","resetButton","style","marginLeft","startButton","map","splitItem","splitTime","splitRemove","filter","elem","fontSize","cursor","Timer","startTime","setStartTime","isPaused","setPaused","subtract","App","activeTab","setActiveTab","utils","MomentUtils","Tabs","event","newValue","indicatorColor","textColor","centered","Tab","label","requestPermission","ReactDOM","render","document","getElementById"],"mappings":"8FACAA,EAAOC,QAAU,CAAC,QAAU,2BAA2B,KAAO,wBAAwB,aAAe,gCAAgC,YAAc,+BAA+B,YAAc,+BAA+B,YAAc,+BAA+B,UAAY,6BAA6B,UAAY,6BAA6B,UAAY,6BAA6B,YAAc,iC,mBCArZD,EAAOC,QAAU,CAAC,QAAU,uBAAuB,KAAO,oBAAoB,UAAY,yBAAyB,QAAU,yB,mBCA7HD,EAAOC,QAAU,CAAC,QAAU,uBAAuB,KAAO,oBAAoB,aAAe,8B,mBCA7FD,EAAOC,QAAU,CAAC,UAAY,gC,mBCA9BD,EAAOC,QAAU,CAAC,YAAY,yB,oGCI1BC,ECCAA,ECIAA,E,mGC6BWC,EAnCD,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAAa,EACDC,mBAASC,KADR,mBAClBC,EADkB,KACZC,EADY,KAYzB,OATAC,qBAAU,WACNC,YAAW,WACPF,EAAQF,KACRK,aAAY,WACRH,EAAQF,OACT,OACJA,IAASM,MAAM,KAAKC,KAAKP,QAC7B,IAGC,oCACKF,GACG,6BACI,yBAAKU,UAAWC,IAAOC,SACnB,yBAAKF,UAAWC,IAAOE,SACnB,yBAAKH,UAAWC,IAAOR,MAClBA,EAAKW,OAAO,aAEjB,yBAAKJ,UAAWC,IAAOI,WAAvB,SAC+B,GAApBZ,EAAKY,YAAmBZ,EAAKY,YAAc,GAAK,EAD3D,MAIJ,yBAAKL,UAAWC,IAAOK,SAClBb,EAAKW,OAAO,qB,0BH6B1BG,EApDI,SAAC,GAAiB,IAAfjB,EAAc,EAAdA,QAAc,EACRC,oBAAS,GADD,mBACzBiB,EADyB,KACnBC,EADmB,OAEElB,mBAASC,KAFX,mBAEzBkB,EAFyB,KAEdC,EAFc,OAGcpB,oBAAS,GAHvB,mBAGzBqB,EAHyB,KAGPC,EAHO,KAqBhC,OAhBAlB,qBAAU,WACFa,IACAM,cAAc1B,GACdQ,YAAW,WACPR,EAAWS,aAAY,WACnBkB,QAAQC,IAAIxB,IAASyB,gBACjBP,EAAUQ,OAAO1B,IAAU,OAC3B,IAAI2B,aAAaT,EAAUN,OAAO,aAClCK,GAAQ,GACRK,cAAc1B,MAEnB,OACJI,IAASM,MAAM,KAAKC,KAAKP,SAEjC,CAACkB,EAAWF,IAGX,oCACKlB,GACG,6BACI,yBAAKU,UAAWC,IAAOC,QAASkB,QAAS,kBAAMP,GAAkB,KAC7D,yBAAKb,UAAWC,IAAOS,WAClBA,EAAUN,OAAO,cAG1B,kBAACiB,EAAA,EAAD,CACIC,MAAM,EACNC,KAAMX,EACNY,OAAO,QACPC,MAAO,CAAC,QAAS,UAAW,WAC5BrB,OAAO,WACPsB,MAAOhB,EACPiB,WAAY,CACRC,eAAgB,kBAAM,OAE1BC,SAAU,SAACC,GACPrB,GAAQ,GACRE,EAAamB,IAEjBC,QAAS,kBAAMlB,GAAkB,S,yBI/C5CmB,EAAexC,IAASyC,QAAQ,O,iBHsF9BC,EAlFG,SAAC,GAAiB,IAAf5C,EAAc,EAAdA,QAAc,EACPC,mBAASyC,GADF,mBACxBvC,EADwB,KAClBC,EADkB,OAECH,oBAAS,GAFV,mBAExB4C,EAFwB,KAEbC,EAFa,OAGG7C,mBAAS,IAHZ,mBAGxB8C,EAHwB,KAGbC,EAHa,KAiB/B,OAZA3C,qBAAU,WACFwC,EACA/C,EAAWS,aAAY,WACnBH,GAAQ,SAAA6C,GAAS,OAAIA,EAAUC,QAAQC,IAAI,EAAG,UAC/C,MAEH3B,cAAc1B,GACdM,EAAQsC,GACRM,EAAa,OAElB,CAACH,IAEC7C,EAID,6BACI,yBAAKU,UAAWC,IAAOC,SACnB,yBAAKF,UAAWC,IAAOR,MAClBA,EAAKW,OAAO,cAGrB,yBACIJ,UAAWC,IAAOyC,cAEjBP,EACG,6BACI,4BACInC,UAAWC,IAAO0C,YAClBvB,QAAS,WACLkB,EAAa,GAAD,mBAAKD,GAAL,CAAgB,CAACO,IAAKpD,MAAUkC,MAAOjC,EAAK+C,cAHhE,SAQA,4BACIxC,UAAWC,IAAO4C,YAClBC,MAAO,CAAEC,WAAY,SACrB3B,QAAS,WACLgB,GAAW,KAJnB,UAWJ,4BACIpC,UAAWC,IAAO+C,YAClB5B,QAAS,WACLgB,GAAW,KAHnB,UAUR,yBAAKpC,UAAWC,IAAOoC,WAClBA,EAAUY,KAAI,SAAAC,GAAS,OACpB,yBAAKlD,UAAWC,IAAOiD,UAAWN,IAAKM,EAAUN,KAC7C,yBAAK5C,UAAWC,IAAOkD,WAClBD,EAAUxB,MAAMtB,OAAO,aAE5B,yBAAKJ,UAAWC,IAAOmD,aACnB,kBAAC,IAAD,CACIhC,QAAS,WACLkB,EAAaD,EAAUgB,QAAO,SAAAC,GAAI,OAAIA,GAAQJ,OAElDJ,MAAO,CAAES,SAAU,OAAQC,OAAQ,oBAtDpD,M,oECjBTxB,EAAexC,IAASyC,QAAQ,OA6GvBwB,EA1GD,SAAC,GAAiB,IAAfnE,EAAc,EAAdA,QAAc,EACOC,mBAASyC,GADhB,mBACpB0B,EADoB,KACTC,EADS,OAEHpE,mBAASyC,GAFN,mBAEpBvC,EAFoB,KAEdC,EAFc,OAGKH,oBAAS,GAHd,mBAGpB4C,EAHoB,KAGTC,EAHS,OAIG7C,oBAAS,GAJZ,mBAIpBqE,EAJoB,KAIVC,EAJU,OAKmBtE,oBAAS,GAL5B,mBAKpBqB,EALoB,KAKFC,EALE,KAwC3B,OAjCAlB,qBAAU,WACFwC,GACI1C,EAAKyB,OAAOc,KACZlB,cAAc1B,GACdgD,GAAW,GACX,IAAIjB,aAAa,gBAE1B,CAAC1B,EAAM0C,IAEVxC,qBAAU,WACDwC,GACDzC,EAAQgE,KACb,CAACA,EAAWvB,IAEfxC,qBAAU,WACFwC,EACA/C,EAAWS,aAAY,kBAAMH,GAAQ,SAAA6C,GAAS,OAAIA,EAAUC,QAAQsB,SAAS,EAAG,UAAO,MAEvFhD,cAAc1B,GACdM,EAAQgE,GACRG,GAAU,MAEf,CAAC1B,IAEJxC,qBAAU,WACFwC,IACIyB,EACA9C,cAAc1B,GAEdA,EAAWS,aAAY,kBAAMH,GAAQ,SAAA6C,GAAS,OAAIA,EAAUC,QAAQsB,SAAS,EAAG,UAAO,QAEhG,CAACF,IAGA,oCACKtE,GACG,6BACI,yBAAKU,UAAWC,IAAOC,QAASkB,QAAS,kBAAOe,GAAatB,GAAkB,KAC3E,yBAAKb,UAAWC,IAAOR,MAClBA,EAAKW,OAAO,cAGrB,yBAAKJ,UAAWC,IAAOyC,cAClBP,EACG,oCACKyB,EACG,kBAAC,IAAD,CACId,MAAO,CAAES,SEhErB,OFgE6CC,OAAQ,WACzCpC,QAAS,WACLyC,GAAU,MAIlB,kBAAC,IAAD,CACIf,MAAO,CAAES,SEvErB,OFuE6CC,OAAQ,WACzCpC,QAAS,WACLyC,GAAU,MAItB,kBAAC,IAAD,CACIf,MAAO,CAAES,SE9EjB,OF8EyCC,OAAQ,WACzCpC,QAAS,WACLgB,GAAW,OAKvB,kBAAC,IAAD,CACIU,MAAO,CAAES,SEtFb,OFsFqCC,OAAQ,WACzCpC,QAAS,WACD3B,EAAKyB,OAAOc,IACZI,GAAW,OAM/B,kBAACf,EAAA,EAAD,CACIC,MAAM,EACNC,KAAMX,EACNY,OAAO,QACPC,MAAO,CAAC,QAAS,UAAW,WAC5BrB,OAAO,WACPsB,MAAOjC,EACPkC,WAAY,CACRC,eAAgB,kBAAM,OAE1BC,SAAU,SAACC,GACP6B,EAAa7B,IAEjBC,QAAS,kBAAMlB,GAAkB,S,kCGnE1CkD,MA/Bf,WAAgB,IAAD,EACqBxE,mBAAS,GAD9B,mBACNyE,EADM,KACKC,EADL,KAOb,OACE,kBAAC,IAAD,CAAyBC,MAAOC,KAC9B,kBAACC,EAAA,EAAD,CACI1C,MAAOsC,EACPnC,SARa,SAACwC,EAAOC,GAC3BL,EAAaK,IAQPC,eAAe,UACfC,UAAU,UACVC,UAAQ,GAEV,kBAACC,EAAA,EAAD,CAAKC,MAAM,UACX,kBAACD,EAAA,EAAD,CAAKC,MAAM,gBACX,kBAACD,EAAA,EAAD,CAAKC,MAAM,cACX,kBAACD,EAAA,EAAD,CAAKC,MAAM,WAEb,yBAAK3E,UAAWC,IAAO,cACrB,kBAAC,EAAD,CAAOX,QAAsB,GAAb0E,IAChB,kBAAC,EAAD,CAAY1E,QAAsB,GAAb0E,IACrB,kBAAC,EAAD,CAAW1E,QAAsB,GAAb0E,IACpB,kBAAC,EAAD,CAAO1E,QAAsB,GAAb0E,OChCxB7C,aAAayD,oBAEbC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.76dadfb4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Stopwatch_display__2lsUp\",\"time\":\"Stopwatch_time__bIS8P\",\"controlPanel\":\"Stopwatch_controlPanel__sB0NX\",\"splitButton\":\"Stopwatch_splitButton__ik1Os\",\"resetButton\":\"Stopwatch_resetButton__2zbM-\",\"startButton\":\"Stopwatch_startButton__25FCs\",\"splitList\":\"Stopwatch_splitList__1SokE\",\"splitItem\":\"Stopwatch_splitItem__1ttMe\",\"splitTime\":\"Stopwatch_splitTime__2sy54\",\"splitRemove\":\"Stopwatch_splitRemove__19h4X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"timeRow\":\"Clock_timeRow__g1F_t\",\"time\":\"Clock_time__3jRNR\",\"utcOffset\":\"Clock_utcOffset__1Mhjb\",\"dateRow\":\"Clock_dateRow__1q38-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Timer_display__3sTD_\",\"time\":\"Timer_time__3u_3X\",\"controlPanel\":\"Timer_controlPanel__1OmiN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alarmTime\":\"AlarmClock_alarmTime__3gGc5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tab-panel\":\"App_tab-panel__13ZSf\"};","import styles from './AlarmClock.module.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport * as moment from 'moment';\r\nimport { TimePicker } from '@material-ui/pickers';\r\n\r\nlet interval;\r\n\r\nconst AlarmClock = ({ visible }) => {\r\n    const [isOn, setIsOn] = useState(false);\r\n    const [alarmTime, setAlarmTime] = useState(moment());\r\n    const [isTimePickerOpen, setTimePickerOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (isOn) {\r\n            clearInterval(interval);\r\n            setTimeout(() => {\r\n                interval = setInterval(() => {\r\n                    console.log(moment().milliseconds())\r\n                    if (alarmTime.isSame(moment(), 's')) {\r\n                        new Notification(alarmTime.format('HH:mm:ss'));\r\n                        setIsOn(false);\r\n                        clearInterval(interval);\r\n                    }\r\n                }, 1000);\r\n            }, moment().endOf('s').diff(moment()));\r\n        }\r\n    }, [alarmTime, isOn]);\r\n\r\n    return (\r\n        <>\r\n            {visible &&\r\n                <div>\r\n                    <div className={styles.display} onClick={() => setTimePickerOpen(true)}>\r\n                        <div className={styles.alarmTime}>\r\n                            {alarmTime.format('HH:mm:ss')}\r\n                        </div>\r\n                    </div>\r\n                    <TimePicker\r\n                        ampm={false}\r\n                        open={isTimePickerOpen}\r\n                        openTo=\"hours\"\r\n                        views={[\"hours\", \"minutes\", \"seconds\"]}\r\n                        format=\"HH:mm:ss\"\r\n                        value={alarmTime}\r\n                        InputProps={{\r\n                            inputComponent: () => null\r\n                        }}\r\n                        onChange={(date) => {\r\n                            setIsOn(true);\r\n                            setAlarmTime(date);\r\n                        }}\r\n                        onClose={() => setTimePickerOpen(false)}\r\n                    />\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default AlarmClock;\r\n","import styles from './Stopwatch.module.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { START_OF_DAY } from '../../helplers';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport moment from 'moment';\r\n\r\nlet interval;\r\n\r\nconst Stopwatch = ({ visible }) => {\r\n    const [time, setTime] = useState(START_OF_DAY);\r\n    const [isStarted, setStarted] = useState(false);\r\n    const [splitList, setSplitList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (isStarted)\r\n            interval = setInterval(() => {\r\n                setTime(prevTimer => prevTimer.clone().add(1, 's'));\r\n            }, 1000);\r\n        else {\r\n            clearInterval(interval);\r\n            setTime(START_OF_DAY);\r\n            setSplitList([]);\r\n        }\r\n    }, [isStarted]);\r\n\r\n    if (!visible)\r\n        return null;\r\n\r\n    return (\r\n        <div>\r\n            <div className={styles.display}>\r\n                <div className={styles.time}>\r\n                    {time.format('HH:mm:ss')}\r\n                </div>\r\n            </div>\r\n            <div\r\n                className={styles.controlPanel}\r\n            >\r\n                {isStarted ?\r\n                    <div>\r\n                        <button\r\n                            className={styles.splitButton}\r\n                            onClick={() => {\r\n                                setSplitList([...splitList, {key: moment(), value: time.clone()}]);\r\n                            }}\r\n                        >\r\n                            Split\r\n                        </button>\r\n                        <button\r\n                            className={styles.resetButton}\r\n                            style={{ marginLeft: '150px' }}\r\n                            onClick={() => {\r\n                                setStarted(false);\r\n                            }}\r\n                        >\r\n                            Reset\r\n                        </button>\r\n                    </div>\r\n                    :\r\n                    <button\r\n                        className={styles.startButton}\r\n                        onClick={() => {\r\n                            setStarted(true);\r\n                        }}\r\n                    >\r\n                        Start\r\n                    </button>\r\n                }\r\n            </div>\r\n            <div className={styles.splitList}>\r\n                {splitList.map(splitItem => (\r\n                    <div className={styles.splitItem} key={splitItem.key}>\r\n                        <div className={styles.splitTime}>\r\n                            {splitItem.value.format('HH:mm:ss')}\r\n                        </div>\r\n                        <div className={styles.splitRemove}>\r\n                            <DeleteIcon\r\n                                onClick={() => {\r\n                                    setSplitList(splitList.filter(elem => elem != splitItem));                             \r\n                                }} \r\n                                style={{ fontSize: '20px', cursor: 'pointer' }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Stopwatch;\r\n","import styles from './Timer.module.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TimePicker } from '@material-ui/pickers';\r\nimport * as moment from 'moment';\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\r\nimport PauseCircleOutlineIcon from '@material-ui/icons/PauseCircleOutline';\r\nimport StopIcon from '@material-ui/icons/Stop';\r\nimport { FONT_SIZE_LG } from '../../helplers';\r\n\r\nconst START_OF_DAY = moment().startOf('day');\r\nlet interval;\r\n\r\nconst Timer = ({ visible }) => {\r\n    const [startTime, setStartTime] = useState(START_OF_DAY);\r\n    const [time, setTime] = useState(START_OF_DAY);\r\n    const [isStarted, setStarted] = useState(false);\r\n    const [isPaused, setPaused] = useState(false);\r\n    const [isTimePickerOpen, setTimePickerOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (isStarted)\r\n            if (time.isSame(START_OF_DAY)) {\r\n                clearInterval(interval);\r\n                setStarted(false);\r\n                new Notification('Timer end')\r\n            }\r\n    }, [time, isStarted]);\r\n\r\n    useEffect(() => {\r\n        if (!isStarted)\r\n            setTime(startTime);\r\n    }, [startTime, isStarted]);\r\n\r\n    useEffect(() => {\r\n        if (isStarted) {\r\n            interval = setInterval(() => setTime(prevTimer => prevTimer.clone().subtract(1, 's')), 1000);\r\n        } else {\r\n            clearInterval(interval);\r\n            setTime(startTime);\r\n            setPaused(false);\r\n        }\r\n    }, [isStarted]);\r\n\r\n    useEffect(() => {\r\n        if (isStarted)\r\n            if (isPaused) {\r\n                clearInterval(interval);\r\n            } else {\r\n                interval = setInterval(() => setTime(prevTimer => prevTimer.clone().subtract(1, 's')), 1000);\r\n            }\r\n    }, [isPaused]);\r\n\r\n    return (\r\n        <>\r\n            {visible &&\r\n                <div>\r\n                    <div className={styles.display} onClick={() => !isStarted && setTimePickerOpen(true)}>\r\n                        <div className={styles.time}>\r\n                            {time.format('HH:mm:ss')}\r\n                        </div>\r\n                    </div>\r\n                    <div className={styles.controlPanel}>\r\n                        {isStarted ?\r\n                            <>\r\n                                {isPaused ?\r\n                                    <PlayCircleOutlineIcon\r\n                                        style={{ fontSize: FONT_SIZE_LG, cursor: 'pointer' }}\r\n                                        onClick={() => {\r\n                                            setPaused(false);\r\n                                        }}\r\n                                    />\r\n                                    :\r\n                                    <PauseCircleOutlineIcon\r\n                                        style={{ fontSize: FONT_SIZE_LG, cursor: 'pointer' }}\r\n                                        onClick={() => {\r\n                                            setPaused(true);\r\n                                        }}\r\n                                    />\r\n                                }\r\n                                <StopIcon\r\n                                    style={{ fontSize: FONT_SIZE_LG, cursor: 'pointer' }}\r\n                                    onClick={() => {\r\n                                        setStarted(false);\r\n                                    }}\r\n                                />\r\n                            </>\r\n                            :\r\n                            <PlayCircleOutlineIcon\r\n                                style={{ fontSize: FONT_SIZE_LG, cursor: 'pointer' }}\r\n                                onClick={() => {\r\n                                    if(!time.isSame(START_OF_DAY))\r\n                                        setStarted(true);\r\n                                }}\r\n                            />\r\n\r\n                        }\r\n                    </div>\r\n                    <TimePicker\r\n                        ampm={false}\r\n                        open={isTimePickerOpen}\r\n                        openTo=\"hours\"\r\n                        views={[\"hours\", \"minutes\", \"seconds\"]}\r\n                        format=\"HH:mm:ss\"\r\n                        value={time}\r\n                        InputProps={{\r\n                            inputComponent: () => null\r\n                        }}\r\n                        onChange={(date) => {\r\n                            setStartTime(date);\r\n                        }}\r\n                        onClose={() => setTimePickerOpen(false)}\r\n                    />\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Timer;\r\n","import styles from './Clock.module.css';\r\nimport React, {useState, useEffect} from 'react';\r\nimport * as moment from 'moment';\r\n\r\nconst Clock = ({visible}) => {\r\n    const [time, setTime] = useState(moment());\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setTime(moment());\r\n            setInterval(() => {\r\n                setTime(moment())\r\n            }, 1000);\r\n        }, moment().endOf('s').diff(moment()));\r\n    }, []);\r\n    \r\n    return (\r\n        <>\r\n            {visible &&\r\n                <div>\r\n                    <div className={styles.display}>\r\n                        <div className={styles.timeRow}>\r\n                            <div className={styles.time}>\r\n                                {time.format('HH:mm:ss')}\r\n                            </div>\r\n                            <div className={styles.utcOffset}>\r\n                                (GMT +{time.utcOffset() != 0 ? time.utcOffset() / 60 : 0})\r\n                            </div>\r\n                        </div>\r\n                        <div className={styles.dateRow}>\r\n                            {time.format('DD MMMM YYYY')}\r\n                        </div>\r\n                    </div>\r\n                </div>      \r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Clock;\r\n","import * as moment from 'moment';\r\n\r\nexport const FONT_SIZE_LG = \"70px\";\r\n\r\nexport const START_OF_DAY = moment().startOf('day');\r\n","import styles from './App.module.css';\nimport Clock from './components/Clock/Clock';\nimport AlarmClock from './components/AlarmClock/AlarmClock';\nimport Stopwatch from './components/Stopwatch/Stopwatch';\nimport Timer from './components/Timer/Timer';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport MomentUtils from '@date-io/moment';\nimport React, {useState} from 'react';\n\n\nfunction App() {\n  const [activeTab, setActiveTab] = useState(0);\n\n  const handleChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n\n  return (\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n      <Tabs\n          value={activeTab}\n          onChange={handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          centered\n      >\n        <Tab label=\"Clock\" />\n        <Tab label=\"Alarm-clock\" />\n        <Tab label=\"Stopwatch\" />\n        <Tab label=\"Timer\" />\n      </Tabs>\n      <div className={styles[\"tab-panel\"]}>\n        <Clock visible={activeTab == 0}/>\n        <AlarmClock visible={activeTab == 1}/>\n        <Stopwatch visible={activeTab == 2}/>\n        <Timer visible={activeTab == 3}/>\n      </div> \n    </MuiPickersUtilsProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nNotification.requestPermission();\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}